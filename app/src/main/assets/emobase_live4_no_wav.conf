
///////////////////////////////////////////////////////////////////////////////////////
///////// > openSMILE configuration file for live emotion recognition < ///////////////
/////////   base set of 988 features, 1st level functionals          //////////////////
/////////   of low-level descriptors such as MFCC, Pitch, LSP, ...   //////////////////
/////////                                                            //////////////////
/////////  * written 2009 by Florian Eyben *                         //////////////////
/////////                                                            //////////////////
///////// (c) 2014 audEERING UG (haftungsbeschrï¿½nkt),                //////////////////
/////////     All rights reserverd.                                  //////////////////
///////////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////////////
;
; This section is always required in openSMILE configuration files
;   it configures the componentManager and gives a list of all components which are to be loaded
; The order in which the components are listed should match
;   the order of the data flow for most efficient processing
;
///////////////////////////////////////////////////////////////////////////////////////
[componentInstances:cComponentManager]
instance[dataMemory].type=cDataMemory
instance[waveIn].type=cOpenslesSource
printLevelStats = 5
profiling = 0
nThreads = 1

[componentInstances:cComponentManager]
instance[fr25].type=cFramer
;; VAD (energy-based)
instance[energy].type=cEnergy
instance[turn].type=cTurnDetector
;;; 40 ms frames features:
  instance[fr40].type=cFramer
instance[w40].type=cWindower
instance[fft40].type=cTransformFFT
instance[fftmagphase40].type=cFFTmagphase
instance[acf40].type=cAcf
instance[cepstrum40].type=cAcf
; Pitch...
instance[pitchACF].type=cPitchACF
;;; 25 ms frames features:
  instance[pe].type=cVectorPreemphasis
instance[win].type=cWindower
instance[fft].type=cTransformFFT
instance[fftmagphase].type=cFFTmagphase
instance[mspec].type=cMelspec
; MFCC
instance[mfcc].type=cMfcc
instance[lpc].type=cLpc
; Line Spectral Frequencies
instance[lsp].type=cLsp
; Zero-Crossings
instance[mzcr].type=cMZcr
; Intensity and Loudness (narrow-band approximation)
instance[intens].type=cIntensity
;;; all LLD concattenated and smoothed using a moving average filter
instance[lld].type=cContourSmoother
; delta coefficients of LLD
instance[delta1].type=cDeltaRegression
;;; functionals over FULL input (e.g. turns)



/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////   component configuration  ////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
; the following sections configure the components listed above
; a help on configuration parameters can be obtained with
;  SMILExtract -H
; or
;  SMILExtract -H configTypeName (= componentTypeName)
/////////////////////////////////////////////////////////////////////////////////////////////

[waveIn:cOpenslesSource]
writer.dmLevel=wave
monoMixdown = 0
writer.levelconf.growDyn = 0
writer.levelconf.isRb = 1
writer.levelconf.nT = 32000
sampleRate = 16000
nBits = 16
channels = 1
audioBuffersize = 512

[fr40:cFramer]
reader.dmLevel=wave
writer.dmLevel=frames40
writer.levelconf.growDyn = 0
writer.levelconf.isRb = 1
;writer.levelconf.nT = 10
writer.levelconf.noHang = 2
frameSize = 0.040
frameStep = 0.010
frameMode = fixed
frameCenterSpecial = center

[w40:cWindower]
reader.dmLevel=frames40
writer.dmLevel=win40frame
copyInputName = 1
processArrayFields = 1
winFunc = ham
gain = 1.0
offset = 0

[fft40:cTransformFFT]
reader.dmLevel=win40frame
writer.dmLevel=fftc40
copyInputName = 1
processArrayFields = 1
inverse = 0
; for compatibility with 2.2.0 and older versions
zeroPadSymmetric = 0

[fftmagphase40:cFFTmagphase]
reader.dmLevel=fftc40
writer.dmLevel=fftmag40
copyInputName = 1
processArrayFields = 1
inverse = 0
magnitude = 1
phase = 0

[acf40:cAcf]
reader.dmLevel=fftmag40
writer.dmLevel=acf40
nameAppend = acf
copyInputName = 1
processArrayFields = 1
usePower = 1
cepstrum = 0
acfCepsNormOutput = 0

[cepstrum40:cAcf]
reader.dmLevel=fftmag40
writer.dmLevel=cepstrum40
nameAppend = acf
copyInputName = 1
processArrayFields = 1
usePower = 1
cepstrum = 1
acfCepsNormOutput = 0
oldCompatCepstrum = 1
absCepstrum = 1

[pitchACF:cPitchACF]
; the pitchACF component must ALWAYS read from acf AND cepstrum in the given order!
reader.dmLevel=acf40;cepstrum40
writer.dmLevel=pitch
processArrayFields=0
maxPitch = 500
voiceProb = 1
voiceQual = 0
HNR = 0
F0 = 1
F0raw = 0
F0env = 1
voicingCutoff = 0.550000

[fr25:cFramer]
reader.dmLevel=wave
writer.dmLevel=frames
frameSize = 0.025
frameStep = 0.010
frameMode = fixed
frameCenterSpecial = center


[pe:cVectorPreemphasis]
reader.dmLevel=frames
writer.dmLevel=framespe
copyInputName = 1
processArrayFields = 1
k=0.97

[win:cWindower]
reader.dmLevel=framespe
writer.dmLevel=winframe
copyInputName = 1
processArrayFields = 1
winFunc = ham
gain = 1.0
offset = 0

[fft:cTransformFFT]
reader.dmLevel=winframe
writer.dmLevel=fftc
copyInputName = 1
processArrayFields = 1
inverse = 0
; for compatibility with 2.2.0 and older versions
zeroPadSymmetric = 0

[fftmagphase:cFFTmagphase]
reader.dmLevel=fftc
writer.dmLevel=fftmag
copyInputName = 1
processArrayFields = 1
inverse = 0
magnitude = 1
phase = 0

[mspec:cMelspec]
reader.dmLevel=fftmag
writer.dmLevel=mspec1
copyInputName = 1
processArrayFields = 1
htkcompatible = 1
nBands = 26
lofreq = 0
hifreq = 8000
usePower = 1
inverse = 0
specScale = mel

[mfcc:cMfcc]
reader.dmLevel=mspec1
writer.dmLevel=mfcc1
copyInputName = 0
processArrayFields = 1
firstMfcc = 1
lastMfcc =  12
cepLifter = 22.0
htkcompatible = 1

[lpc:cLpc]
reader.dmLevel=framespe
writer.dmLevel=lpc
copyInputName = 1
processArrayFields = 1
method = acf
p = 8
saveLPCoeff = 1
lpGain = 0
saveRefCoeff = 0
residual = 0
forwardFilter = 0
lpSpectrum = 0

[lsp:cLsp]
reader.dmLevel=lpc
writer.dmLevel=lsp
copyInputName = 1
processArrayFields = 0

[intens:cIntensity]
reader.dmLevel=frames
writer.dmLevel=intens
copyInputName = 1
processArrayFields = 1
intensity=1
loudness =1

[mzcr:cMZcr]
reader.dmLevel=frames
writer.dmLevel=mzcr
copyInputName = 1
processArrayFields = 1
zcr = 1
amax = 0
mcr = 0
maxmin = 0
dc = 0

[lld:cContourSmoother]
reader.dmLevel=intens;mfcc1;lsp;mzcr;pitch
writer.dmLevel=lld
writer.levelconf.nT = 2500
writer.levelconf.isRb=1
writer.levelconf.growDyn=0
nameAppend = sma
copyInputName = 1
noPostEOIprocessing = 0
smaWin = 3


// ---- delta regression of LLD ----
[delta1:cDeltaRegression]
reader.dmLevel=lld
writer.dmLevel=lld_de
blocksize=1
writer.levelconf.nT = 2500
writer.levelconf.isRb=1
writer.levelconf.growDyn=0
nameAppend = de
copyInputName = 1
noPostEOIprocessing = 0
deltawin=2

[energy:cEnergy]
reader.dmLevel=winframe
writer.dmLevel=energy
rms=1
log=0

// the voice activity detection (turn detector)
[turn:cTurnDetector]
reader.dmLevel=energy
writer.dmLevel=isTurn
; overwrite data in output level, if it has not been read and level is full
; we must set this here, since the level isTurn is a dead-end in our configuration
writer.levelconf.noHang=1
; send a message to the functionals component at turn end
;messageRecp = functL1
; send turn start / turn end event messages to the debug turn wave file output component
;eventRecp = turnDump
;; you may not increase this over the writer.levelconf.nT value of the lld and lld_de levels!
;; so by default not more than 24!
maxTurnLength = 12
maxTurnLengthGrace = 3
idx = 0
nPost = 30
nPre = 10
useRMS = 1
; disable auto adjustment of VAD threshold, this does not work well yet.
autoThreshold = 0
; instead, set the threshold manually to a default value.
; this derived from the RMS energy from normalised sample values (0..1)
; --> !!!!! you might need to adjust this value depending on your recording setup !!!!!!! <-------------------
threshold = 0.0035
; --> !!!!! you might need to adjust this value depending on your recording setup !!!!!!! <-------------------


[componentInstances:cComponentManager]
instance[featureSink].type=cCsvSink
;instance[lldsink].type=cCsvSink

[featureSink:cCsvSink]
reader.dmLevel = isTurn;lld;lld_de;intens;mfcc1;lsp;mzcr;pitch
filename = \cm[output(O){?}:output CSV file for summarised parameters, set to a valid filename to enable this output sink, data is appended if file exists]
append = 0
timestamp = 1
errorOnNoOutput = 1

;[lldsink:cCsvSink]
;reader.dmLevel = isTurn;lld;lld_de
;filename=\cm[output(D){?}:output csv file for LLD, disabled by default ?, only written if filename given]
;append = 0
;timestamp = 1
;errorOnNoOutput = 1


//////---------------------- END -------------------------///////
