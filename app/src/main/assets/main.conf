// This file is part of openSMILE.
// (c) 2016 by audEERING GmbH. All rights reserved.
// See file COPYING for details on licensing terms.
//
// Revised by Tiantian Feng: tiantiaf@usc.edu

[componentInstances:cComponentManager]
instance[dataMemory].type=cDataMemory
instance[waveIn].type=cOpenslesSource
instance[energy].type=cEnergy
instance[turn].type=cTurnDetector
printLevelStats = 5
profiling = 0
nThreads = 1

[waveIn:cOpenslesSource]
writer.dmLevel=wave
monoMixdown = 0
writer.levelconf.growDyn = 0
writer.levelconf.isRb = 1
writer.levelconf.nT = 32000
sampleRate = 16000
nBits = 16
channels = 1
audioBuffersize = 256

\{GeMAPSv01a_core.lld.conf.inc}
\{eGeMAPSv01a_core.lld.conf.inc}
; Not be able to do calculation of func this in live mode
;\{GeMAPSv01a_core.func.conf.inc}
;\{eGeMAPSv01a_core.func.conf.inc}

[energy:cEnergy]
reader.dmLevel=gemapsv01a_frame25
writer.dmLevel=energy
rms=1
log=0

// the voice activity detection (turn detector)
[turn:cTurnDetector]
reader.dmLevel=energy
writer.dmLevel=isTurn
; overwrite data in output level, if it has not been read and level is full
; we must set this here, since the level isTurn is a dead-end in our configuration
writer.levelconf.noHang=1
; send a message to the functionals component at turn end
;messageRecp = functL1
; send turn start / turn end event messages to the debug turn wave file output component
;eventRecp = turnDump
;; you may not increase this over the writer.levelconf.nT value of the lld and lld_de levels!
;; so by default not more than 24!
maxTurnLength = 12
maxTurnLengthGrace = 3
idx = 0
nPost = 30
nPre = 10
useRMS = 1
; disable auto adjustment of VAD threshold, this does not work well yet.
autoThreshold = 0
; instead, set the threshold manually to a default value.
; this derived from the RMS energy from normalised sample values (0..1)
; --> !!!!! you might need to adjust this value depending on your recording setup !!!!!!! <-------------------
threshold = 0.005
; --> !!!!! you might need to adjust this value depending on your recording setup !!!!!!! <-------------------


[componentInstances:cComponentManager]
instance[lldconcat].type=cVectorConcat
instance[llddeconcat].type=cVectorConcat
;instance[funcconcat].type=cVectorConcat

[lldconcat:cVectorConcat]
reader.dmLevel = egemapsv01a_lldsetE_smo
writer.dmLevel = lld
includeSingleElementFields = 1

[llddeconcat:cVectorConcat]
reader.dmLevel = gemapsv01a_lldsetF_smo
writer.dmLevel = lld_de
includeSingleElementFields = 1

[componentInstances:cComponentManager]
instance[featureSink].type=cCsvSink
instance[waveSink].type = cWaveSink


[featureSink:cCsvSink]
reader.dmLevel = isTurn;lld;lld_de
;reader.dmLevel = func
filename = \cm[output(O){?}:output CSV file for summarised parameters, set to a valid filename to enable this output sink, data is appended if file exists]
append = 0
timestamp = 1
errorOnNoOutput = 1

[waveSink:cWaveSink]
reader.dmLevel = wave
filename = \cm[outputfile(W){?}:file name of the output wav file]
sampleFormat = 16bit
blocksize=500






