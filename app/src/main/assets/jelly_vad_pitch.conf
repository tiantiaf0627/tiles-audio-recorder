// This file is part of openSMILE.
// (c) 2016 by audEERING GmbH. All rights reserved.
// See file COPYING for details on licensing terms.
//
// Written by Florian Eyben. fe@audeering.com
// Revised by Tiantian Feng, tiantiaf@usc.edu

[componentInstances:cComponentManager]
instance[dataMemory].type=cDataMemory
instance[waveIn].type=cOpenslesSource
instance[jniMessageInterface].type = cJniMessageInterface
printLevelStats = 5
profiling = 0
nThreads = 1

[waveIn:cOpenslesSource]
writer.dmLevel=wave
monoMixdown = 0
writer.levelconf.growDyn = 0
writer.levelconf.isRb = 1
writer.levelconf.nT = 16000
sampleRate = 8000
nBits = 16
channels = 1
audioBuffersize = 256

[componentInstances:cComponentManager]
instance[frames].type=cFramer
instance[framespe].type=cVectorPreemphasis
instance[winframe].type=cWindower
instance[energy].type=cEnergy
instance[isTurn].type=cTurnDetector

[frames:cFramer]
reader.dmLevel = wave
writer.dmLevel = frames
writer.levelconf.growDyn = 0
writer.levelconf.isRb = 1
writer.levelconf.nT = 10
writer.levelconf.noHang = 2
frameSize = 0.040
frameStep = 0.010

[framespe:cVectorPreemphasis]
reader.dmLevel=frames
writer.dmLevel=framespe
copyInputName = 1
processArrayFields = 1
k=0.97

[winframe:cWindower]
reader.dmLevel=framespe
writer.dmLevel=winframe
copyInputName = 1
processArrayFields = 1
winFunc = ham
gain = 1.0
offset = 0

[componentInstances:cComponentManager]
instance[fftB].type=cTransformFFT
instance[fftmagB].type=cFFTmagphase
instance[scale].type=cSpecScale
instance[pitchShs].type=cPitchShs
instance[pitchSmooth2].type=cPitchSmoother

[fftB:cTransformFFT]
reader.dmLevel=winframe
writer.dmLevel=fftB
copyInputName = 1
processArrayFields = 1
inverse = 0

[fftmagB:cFFTmagphase]
reader.dmLevel=fftB
writer.dmLevel=fftmagB
copyInputName = 1
processArrayFields = 1
inverse = 0
magnitude = 1
phase = 0

[scale:cSpecScale]
reader.dmLevel=fftmagB
writer.dmLevel=hps
// nameAppend =
copyInputName = 1
processArrayFields = 0
scale=octave
sourceScale = lin
// logScaleBase = 2
// logSourceScaleBase = 2
// firstNote = 55
interpMethod = spline
minF = 25
maxF = -1
nPointsTarget = 0
specSmooth = 1
specEnhance = 1
auditoryWeighting = 1

[pitchShs:cPitchShs]
reader.dmLevel=hps
writer.dmLevel=pitchShs
copyInputName = 1
F0raw = 0
voicingClip = 0
voicingC1=0
scores=1
voicing=1
nCandidates=3
octaveCorrection=0
maxPitch = 620
minPitch = 52

[pitchSmooth2:cPitchSmoother]
reader.dmLevel=pitchShs
writer.dmLevel=pitchF
copyInputName = 1
processArrayFields = 0
medianFilter0 = 0
postSmoothing = 0
postSmoothingMethod = simple
; note: octave correction is too agressive, thus we disable it..
octaveCorrection = 0
F0final = 1
F0finalEnv = 0
no0f0 = 0
voicingFinalClipped = 0
voicingFinalUnclipped = 1
F0raw = 0
voicingC1 = 0
voicingClip = 0

[componentInstances:cComponentManager]
;instance[mspec].type=cMelspec
;instance[mfcc].type=cMfcc
instance[acf].type=cAcf
instance[cepstrum].type=cAcf
instance[pitchACF].type=cPitchACF

;[mspec:cMelspec]
;reader.dmLevel=fftmagB
;writer.dmLevel=mspec1
;copyInputName = 1
;processArrayFields = 1
;htkcompatible = 1
;nBands = 26
;usePower = 0
;lofreq = 0
;hifreq = 8000
;inverse = 0
;specScale = mel

;[mfcc:cMfcc]
;reader.dmLevel=mspec1
;writer.dmLevel=mfcc1
;copyInputName = 1
;processArrayFields = 1
;firstMfcc = 1
;lastMfcc =  12
;cepLifter = 22.0
;htkcompatible = 1


[acf:cAcf]
reader.dmLevel=fftmagB
writer.dmLevel=acf
nameAppend = acf
copyInputName = 1
processArrayFields = 1
usePower = 1
cepstrum = 0

[cepstrum:cAcf]
reader.dmLevel=fftmagB
writer.dmLevel=cepstrum
nameAppend = acf
copyInputName = 1
processArrayFields = 1
usePower = 1
cepstrum = 1

[pitchACF:cPitchACF]
; the pitchACF component must ALWAYS read from acf AND cepstrum in the given order!
reader.dmLevel=acf;cepstrum
writer.dmLevel=pitch
copyInputName = 1
processArrayFields=0
maxPitch = 500
voiceProb = 1
voiceQual = 0
HNR = 0
F0 = 1
F0raw = 0
F0env = 0
voicingCutoff = 0.550000


[energy:cEnergy]
reader.dmLevel=winframe
writer.dmLevel=energy
rms=1
log=0

// the voice activity detection (turn detector)
[isTurn:cTurnDetector]
reader.dmLevel=energy
writer.dmLevel=isTurn
; overwrite data in output level, if it has not been read and level is full
; we must set this here, since the level isTurn is a dead-end in our configuration
writer.levelconf.noHang=1
; send a message to the functionals component at turn end
;messageRecp = jniMessageInterface
; send turn start / turn end event messages to the debug turn wave file output component
;eventRecp = turnDump
;; you may not increase this over the writer.levelconf.nT value of the lld and lld_de levels!
;; so by default not more than 24!
maxTurnLength = 12
maxTurnLengthGrace = 3
idx = 0
nPost = 30
nPre = 10
useRMS = 1
minTurnLengthTurnFrameTimeMessage=0.9
; disable auto adjustment of VAD threshold, this does not work well yet.
autoThreshold = 0
; instead, set the threshold manually to a default value.
; this derived from the RMS energy from normalised sample values (0..1)
; --> !!!!! you might need to adjust this value depending on your recording setup !!!!!!! <-------------------
threshold = 0.0036
; --> !!!!! you might need to adjust this value depending on your recording setup !!!!!!! <-------------------


\{message_vad_pitch.conf.inc}

[jniMessageInterface:cJniMessageInterface]
sendMessagesInTick = 100
JNIcallbackClass = com/audeering/opensmile/androidtemplate/SmileJNI
JNIstringReceiverMethod = receiveText

