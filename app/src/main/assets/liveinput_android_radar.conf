// This file is part of openSMILE.
// (c) 2016 by audEERING GmbH. All rights reserved.
// See file COPYING for details on licensing terms.
//
// Written by Florian Eyben. fe@audeering.com
// Revised by Tiantian Feng. tiantiaf@usc.edu

[componentInstances:cComponentManager]
instance[dataMemory].type=cDataMemory
instance[waveIn].type=cOpenslesSource

printLevelStats = 5
profiling = 0
nThreads = 1

[waveIn:cOpenslesSource]
writer.dmLevel=wave
monoMixdown = 0
writer.levelconf.growDyn = 0
writer.levelconf.isRb = 1
writer.levelconf.nT = 16000
sampleRate = 8000
nBits = 16
channels = 1
audioBuffersize = 256

;\{features.conf.inc}
[componentInstances:cComponentManager]
instance[framesB].type=cFramer
instance[energyMeter].type=cEnergy
instance[intens].type=cIntensity
instance[winB].type=cWindower
instance[fftB].type=cTransformFFT
instance[fftmagB].type=cFFTmagphase
instance[bandspec].type=cMelspec

[framesB:cFramer]
reader.dmLevel = wave
writer.dmLevel = framesB
writer.levelconf.growDyn = 0
writer.levelconf.isRb = 1
writer.levelconf.nT = 10
writer.levelconf.noHang = 2
frameSize = 0.025
frameStep = 0.010

[energyMeter:cEnergy]
reader.dmLevel=framesB
writer.dmLevel=energyB
log=1
rms=0
ebiasLog = 30
escaleLog = 12

[winB:cWindower]
reader.dmLevel=framesB
writer.dmLevel=windowsB
copyInputName = 1
processArrayFields = 1
; hamming window
winFunc = ham

[intens:cIntensity]
reader.dmLevel=framesB
writer.dmLevel=intens
intensity=0
loudness=1

[fftB:cTransformFFT]
reader.dmLevel=windowsB
writer.dmLevel=fftB
copyInputName = 1
processArrayFields = 1
inverse = 0

[fftmagB:cFFTmagphase]
reader.dmLevel=fftB
writer.dmLevel=fftmagB
copyInputName = 1
processArrayFields = 1
inverse = 0
magnitude = 1
phase = 0

[fftmagBphase:cFFTmagphase]
reader.dmLevel=fftB
writer.dmLevel=fftmagBphase
copyInputName = 1
processArrayFields = 1
inverse = 0
magnitude = 0
phase = 1

[bandspec:cMelspec]
reader.dmLevel=fftmagB
writer.dmLevel=melspec
copyInputName = 1
processArrayFields = 1
htkcompatible = 0
nBands = 26
usePower = 1
lofreq = 20
hifreq = 8000
specScale = bark
inverse = 0



[componentInstances:cComponentManager]
instance[pitchShs].type=cPitchShs
instance[pitchSmooth2].type=cPitchSmoother
instance[pitchJitter].type=cPitchJitter

[pitchShs:cPitchShs]
reader.dmLevel=hps
writer.dmLevel=pitchShs
F0raw = 0
voicingClip = 0
voicingC1=0
scores=1
voicing=1
nCandidates=3
octaveCorrection=0

[pitchSmooth2:cPitchSmoother]
reader.dmLevel=pitchShs
writer.dmLevel=pitchF
F0raw = 0
F0final = 1
F0finalEnv = 0
voicingFinalUnclipped = 0
medianFilter0 = 0
postSmoothingMethod = simple
octaveCorrection = 0
writer.levelconf.nT=10
writer.levelconf.isRb=0
writer.levelconf.growDyn=1

[pitchJitter:cPitchJitter]
reader.dmLevel = wave
writer.dmLevel = pitchJitter
copyInputName = 1
F0reader.dmLevel = pitchF
F0field = F0final
searchRangeRel = 0.250000
jitterLocal = 1
jitterDDP = 1
jitterLocalEnv = 0
jitterDDPEnv = 0
shimmerLocal = 1
shimmerLocalEnv = 0
onlyVoiced = 0

[componentInstances:cComponentManager]

instance[mfcc].type=cMfcc
instance[scale].type=cSpecScale
instance[res].type=cSpecResample

instance[lpc].type=cLpc
instance[lsp].type=cLsp
instance[spectral].type=cSpectral


[mfcc:cMfcc]
reader.dmLevel = melspec
writer.dmLevel = mfcc
htkcompatible = 0
firstMfcc=0
lastMfcc=14
cepLifter=22


[scale:cSpecScale]
reader.dmLevel=fftmagB
writer.dmLevel=hps
scale=log
logScaleBase=2

[res:cSpecResample]
reader.dmLevel=fftB
writer.dmLevel=outpR
targetFs = 11000

[lpc:cLpc]
;reader.dmLevel=framespe
reader.dmLevel=outpR
writer.dmLevel=lpc
p=8
method = acf
saveLPCoeff = 1
lpGain = 0
saveRefCoeff = 0
residual = 0
forwardFilter = 0
lpSpectrum = 0

[lsp:cLsp]
reader.dmLevel=lpc
writer.dmLevel=lsp


[spectral:cSpectral]
reader.dmLevel=fftmagB
writer.dmLevel=spectral
copyInputName = 1
processArrayFields = 1
squareInput = 1
bands[0]=0-250
bands[1]=0-650
bands[2]=250-650
bands[3]=1000-4000
;;;bands[4]=3010-9123
rollOff[0] = 0.25
rollOff[1] = 0.50
rollOff[2] = 0.75
rollOff[3] = 0.90
; buggyRollOff = 1
; set the above for compatibility with older releases
flux = 1
centroid = 1
maxPos = 1
minPos = 1
entropy = 0

[componentInstances:cComponentManager]
instance[formants].type=cFormantLpc

[formants:cFormantLpc]
reader.dmLevel=lpc
writer.dmLevel=formants
saveIntensity=0
saveBandwidths=1
maxF=5500.0
minF=50.0
nFormants=5
useLpSpec=0
medianFilter=0
octaveCorrection=0

[componentInstances:cComponentManager]
instance[isTurn].type=cTurnDetector

// the voice activity detection (turn detector)
[isTurn:cTurnDetector]
reader.dmLevel=energyB
writer.dmLevel=isTurn
; overwrite data in output level, if it has not been read and level is full
; we must set this here, since the level isTurn is a dead-end in our configuration
writer.levelconf.noHang=1
;; you may not increase this over the writer.levelconf.nT value of the lld and lld_de levels!
;; so by default not more than 24!
maxTurnLength = 12
maxTurnLengthGrace = 3
idx = 0
nPost = 30
nPre = 10
useRMS = 1
; disable auto adjustment of VAD threshold, this does not work well yet.
autoThreshold = 0
; instead, set the threshold manually to a default value.
; this derived from the RMS energy from normalised sample values (0..1)
; --> !!!!! you might need to adjust this value depending on your recording setup !!!!!!! <-------------------
threshold = 0.0015
; --> !!!!! you might need to adjust this value depending on your recording setup !!!!!!! <-------------------




;\{messages.conf.inc}

[componentInstances:cComponentManager]
instance[energySink].type=cCsvSink
instance[waveSink].type = cWaveSink

[energySink:cCsvSink]
reader.dmLevel = melspec;energyB;intens;pitchShs;pitchF;pitchJitter;mfcc;lsp;spectral;formants;isTurn
filename = \cm[output(O){?}:output CSV file for summarised parameters, set to a valid filename to enable this output sink, data is appended if file exists]
append = 0
timestamp = 1

[waveSink:cWaveSink]
reader.dmLevel = wave
filename = \cm[outputfile(W){?}:file name of the output wav file]
sampleFormat = 16bit
blocksize=500

\{message_vad.conf.inc}

[componentInstances:cComponentManager]
instance[jniMessageInterface].type = cJniMessageInterface

[jniMessageInterface:cJniMessageInterface]
sendMessagesInTick = 1
JNIcallbackClass = com/audeering/opensmile/androidtemplate/SmileJNI
JNIstringReceiverMethod = receiveText


